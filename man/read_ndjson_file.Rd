% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ndjson.R
\name{read_ndjson_file}
\alias{read_ndjson_file}
\title{Parse an NDJSON file to a data.frame or list}
\usage{
read_ndjson_file(
  filename,
  type = c("df", "list"),
  nread = -1,
  nskip = 0,
  nprobe = 100,
  opts = list(),
  ...
)
}
\arguments{
\item{filename}{text file or gzipped file}

\item{type}{'df' or 'list'.  Default: 'df' (data.frame)}

\item{nread}{number of records to read. Default: -1 (reads all rows)}

\item{nskip}{number of records to skip before starting to read. Default: 0}

\item{nprobe}{Number of lines to read to determine types for data.frame
columns.  Default: 100. Only valid for \code{read_ndjson_file()}}

\item{opts}{Named list of options for parsing. Usually created by \code{opts_read_json()}}

\item{...}{Other named options can be used to override any options in \code{opts}.
The valid named options are identical to arguments to \code{\link[=opts_read_json]{opts_read_json()}}}
}
\value{
list or data.frame
}
\description{
If reading as data.frame, each row of NDJSON becomes a row in the data.frame.
If reading as a list, then each row becomes an element in the list.
}
\details{
If parsing NDJSON to a data.frame it is usually better if the json objects
are consistent from line-to-line.  Type inference for the data.frame is done
during initialisation by reading through \code{nprobe} lines.  Warning: if
there is a type-mismatch further into the file than it is probed, then you
will get missing values in the data.frame.

No flattening of the namespace is done i.e. nested object remain nested.
}
\examples{
\dontrun{
read_ndjson_file("flights.ndjson", nskip = 1000, nread = 200)
read_ndjson_file("flights.ndjson", nskip = 1000, nread = 200)
}

}
\seealso{
Other JSON Parsers: 
\code{\link{read_json_conn}()},
\code{\link{read_json_file}()},
\code{\link{read_json_raw}()},
\code{\link{read_json_str}()}
}
\concept{JSON Parsers}
